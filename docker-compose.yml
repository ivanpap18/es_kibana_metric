version: "2.2"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es04\n"\
          "    dns:\n"\
          "      - es04\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Creating pipeline for project April";
        curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_ingest/pipeline/Logs_April -d "{\"description\": \"Pipeline pour le projet April\",\"processors\":[{\"remove\":{\"field\":\"data_stream\"}}]}"; 
        curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_ilm/policy/30-days-policy -d "{\"policy\":{\"phases\":{\"hot\":{\"actions\":{\"rollover\":{\"max_primary_shard_size\":\"50gb\"}}},\"warm\":{\"min_age\":\"30d\",\"actions\":{\"shrink\":{\"number_of_shards\":1},\"forcemerge\": {\"max_num_segments\": 1}}}}}}";
        curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_component_template/april-settings -d "{\"template\":{\"settings\":{\"index.lifecycle.name\":\"30-days-policy\"}}}";
        curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_component_template/april-mappings -d "{\"template\":{\"mappings\":{\"properties\":{\"@timestamp\":{\"type\":\"date\",\"format\":\"date_optional_time||epoch_millis\"}}}}}}";
        curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_index_template/april-index-template -d "{\"index_patterns\":[\"logs-docker-april-dev*\"],\"data_stream\":{},\"composed_of\":[\"april-mappings\",\"april-settings\"],\"priority\":500}";
        curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_data_stream/logs-docker-april-dev
        echo "Creating pipeline geoip with processor for ip addresses";
        echo "All done!";
      '
  
    # curl -s -X PUT --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_ingest/pipeline/geoip -d "{\"processors\":[{\"geoip\":{\"field\":\"docker.container.ip_addresses\"}}]}"; 
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy 
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - PIPELINE_APRIL=${PIPELINE_APRIL} 
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    # build:
    #   context: .
    #   dockerfile: DockerFile_Kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY="34bf373b59f60228ffd8fa933b749a14"
      # - XPACK_REPORTING_ENCRYPTIONKEY="c5364e62c092c7f6a034315e06f967c1"
      # - XPACK_SECURITY_ENCRYPTIONKEY="f61481b432bd80ed9b65697c01878b85"
      - ENTERPRISESEARCH_HOST=http://enterprise-search:3002
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile_MetricBeat
    volumes:
      - certs:/usr/share/metricbeat/config/certs
      - metricbeatdata:/usr/share/metricbeat/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PATH_METRICBEAT=${PATH_METRICBEAT}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - ES_PORT=${ES_PORT}
      - KIBANA_PORT=${KIBANA_PORT}
      - END_POINT=${END_POINT} 

  # filebeat:
  #   # image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
  #   depends_on:
  #     es01:
  #       condition: service_healthy
  #     es02:
  #       condition: service_healthy
  #     es03:
  #       condition: service_healthy
  #   command: 
  #     - "-e"
  #     - "--strict.perms=false"
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_FileBeat
  #   volumes:
  #     - \\wsl.localhost\Ubuntu-22.04\mnt\c\FormationFasst\es_kibana_metric\filebeat.yml:/usr/share/filebeat/filebeat.yml
  #     - \\wsl.localhost\Ubuntu-22.04\mnt\c\FormationFasst\es_kibana_metric\vector/certs:/usr/share/filebeat/config/certs
  #     - filebeat:/usr/share/filebeat/data
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
  #     - certs:/usr/share/filebeat/config/certs
  #   environment:
  #     - ELASTICSEARCH_HOST=${END_POINT}
  #     - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
  #     - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}

  vector:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile_Vector
    volumes:
      - \\wsl.localhost\Ubuntu-22.04\mnt\c\FormationFasst\es_kibana_metric\vector/:/etc/vector/
      - certs:/etc/vector/certs
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - ES_PORT=${ES_PORT}
      - KIBANA_PORT=${KIBANA_PORT}
      - CRT_FILE=${CRT_FILE}
      - KEY_FILE=${KEY_FILE}
      - CA_FILE=${CA_FILE}
      - LICENSE=${LICENSE}
      - DATA_DIR=${DATA_DIR} 
      - END_POINT=${END_POINT}
      - VECTOR_CONFIG_DIR=${VECTOR_CONFIG_DIR}
      # - VECTOR_WATCH_CONFIG=${VECTOR_WATCH_CONFIG}
      
  # enterprise-search:
  #   depends_on:
  #     es01:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_healthy
    # build:
      # context: .
      # dockerfile: DockerFile_Enterprise
    # image: docker.elastic.co/enterprise-search/enterprise-search:8.6.0
    # ports:
    #   - 3002:3002
    # volumes:
    #   - certs:/usr/share/enterprise-search/config/certs
    #   - enterprisesearchdata:/usr/share/enterprise-search/config
    # environment:
    #   - elasticsearch.host=http://es01:9200
    #   - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
    #   - allow_es_settings_modification=true
    #   - elasticsearch.host=${END_POINT}
    #   - elasticsearch.username=elastic
    #   - elasticsearch.password=${ELASTIC_PASSWORD}
    #   - elasticsearch.ssl.enabled=true
    #   - elasticsearch.ssl.certificate_authority=/usr/share/enterprise-search/config/certs/ca/ca.crt
    #   - kibana.host=http://kibana:5601
    #   - kibana.external_url=http://localhost:5601
    # healthcheck:
    #   test:
    #     [
    #         "CMD-SHELL",
    #         "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
    #     ]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 120

networks:
  es_default:
    external: true
    driver: overlay
        
volumes:
  filebeat:
    driver: local
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata:
    driver: local
  enterprisesearchdata:
    driver: local